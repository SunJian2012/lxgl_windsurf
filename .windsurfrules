# 医药企业流向管理系统 .cursorrules 文件

##  目标

*   强制代码风格和格式一致性。
*   推广最佳实践，避免常见错误。
*   定义项目的文件结构和命名规范。
*   提高代码性能和效率。

##  前端 (React + Material-UI)

*   使用 JavaScript 或 TypeScript 进行开发。
*   **使用 React 组件构建用户界面。**
*   **使用 Material-UI 组件库，遵循 Material Design 规范。**
*   使用 Create React App 或 Vite 等工具创建 React 项目。
*   使用 Redux 或 MobX 等状态管理库管理应用状态。
*   使用 React Router 进行路由管理。
*   使用 Axios 或 Fetch API 进行网络请求。

##  后端 (ASP.NET Core)
# .NET Development Rules

You are a senior .NET backend developer and an expert in  ASP. NET Core, and Entity Framework Core，'c# 10+ features.

## Code Style and Structure
- Write concise, idiomatic C# code with accurate examples.
- Follow .NET and ASP. NET Core conventions and best practices.
- Use object-oriented and functional programming patterns as appropriate.
- Prefer LINQ and lambda expressions for collection operations.
- Use descriptive variable and method names (e.g., 'IsUserSignedIn', 'CalculateTotal').
- Structure files according to .NET conventions (Controllers, Models, Services, etc.).

## Naming Conventions
- Use PascalCase for class names, method names, and public members.
- Use camelCase for local variables and private fields.
- Use UPPERCASE for constants.
- Prefix interface names with "I" (e.g., 'IUserService').

## C# and .NET Usage
- Use C# 10+ features when appropriate (e.g., record types, pattern matching, null-coalescing assignment).
- Leverage built-in ASP. NET Core features and middleware.
- Use Entity Framework Core effectively for database operations.

## Syntax and Formatting
- Follow the C# Coding Conventions (https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)
- Use C#'s expressive syntax (e.g., null-conditional operators, string interpolation)
- Use 'var' for implicit typing when the type is obvious.

## Error Handling and Validation
- Use exceptions for exceptional cases, not for control flow.
- Implement proper error logging using built-in .NET logging or a third-party logger.
- Use Data Annotations or Fluent Validation for model validation.
- Implement global exception handling middleware.
- Return appropriate HTTP status codes and consistent error responses.

## API Design
- Follow RESTful API design principles.
- Use attribute routing in controllers.
- Implement versioning for your API.
- Use action filters for cross-cutting concerns.

## Performance Optimization
- Use asynchronous programming with async/await for I/O-bound operations.
- Implement caching strategies using IMemoryCache or distributed caching.
- Use efficient LINQ queries and avoid N+1 query problems.
- Implement pagination for large data sets.

## Key Conventions
- Use Dependency Injection for loose coupling and testability.
- Implement repository pattern or use Entity Framework Core directly, depending on the complexity.
- Use AutoMapper for object-to-object mapping if needed.
- Implement background tasks using IHostedService or BackgroundService.

## Testing
- Write unit tests using xUnit, NUnit, or MSTest.
- Use Moq or NSubstitute for mocking dependencies.
- Implement integration tests for API endpoints.

## Security
- Use Authentication and Authorization middleware.
- Implement JWT authentication for stateless API authentication.
- Use HTTPS and enforce SSL.
- Implement proper CORS policies.

## API Documentation
- Use Swagger/OpenAPI for API documentation (as per installed Swashbuckle. AspNetCore package).
- Provide XML comments for controllers and models to enhance Swagger documentation.

Follow the official Microsoft documentation and ASP. NET Core guides for best practices in routing, controllers, models, and other API components.
## 参考

* [React 官方文档](https://reactjs.org/)
* [Material-UI 官方文档](https://mui.com/)
* [ASP.NET Core 官方文档](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-7.0)
* [微服务架构](https://microservices.io/)

## 常见错误预防指南

### 数据模型和数据库同步
- 保持模型属性的命名统一性
- 避免重复或冗余的属性定义
- 及时创建和应用数据库迁移
- 在提交代码前验证所有迁移

### 开发流程
- 使用开发分支进行功能开发
- 合并前进行完整测试
- 维护数据库变更日志
- 使用版本控制管理迁移脚本

### 日志和错误处理
- 在关键操作处添加详细日志
- 实现全局异常处理
- 记录异常的完整上下文
- 使用结构化日志格式

### 代码审查清单
- [ ] 检查模型属性命名
- [ ] 验证数据库迁移
- [ ] 确认日志记录完整性
- [ ] 测试错误处理逻辑

### 自动化测试
- 编写单元测试覆盖核心功能
- 实现集成测试验证端到端流程
- 包含数据库操作的测试用例
- 模拟异常情况的测试场景